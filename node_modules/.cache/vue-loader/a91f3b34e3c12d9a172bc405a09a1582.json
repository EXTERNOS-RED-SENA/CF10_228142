{"remainingRequest":"/home/runner/work/CF10_228142/CF10_228142/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF10_228142/CF10_228142/src/views/Tema4.vue?vue&type=template&id=23a3b832&lang=pug","dependencies":[{"path":"/home/runner/work/CF10_228142/CF10_228142/src/views/Tema4.vue","mtime":1733885360319},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF10_228142/CF10_228142/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDQKICAgICAgaDEgTW9uaXRvcmVvIHkgZ2VzdGnDs24KCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgcCBFbCBtb25pdG9yZW8geSBsYSBnZXN0acOzbiBzb24gY29tcG9uZW50ZXMgZnVuZGFtZW50YWxlcyBlbiBsb3Mgc2lzdGVtYXMgZGUgc2VndXJpZGFkIGVsZWN0csOzbmljYSwgeWEgcXVlIHBlcm1pdGVuIHN1cGVydmlzYXIgZGUgbWFuZXJhIGNvbnRpbnVhIGxhcyBjb25kaWNpb25lcyBkZSB1biBlbnRvcm5vIHkgcmVhY2Npb25hciBhbnRlIGN1YWxxdWllciBldmVudG8gcXVlIHB1ZWRhIHN1cG9uZXIgdW5hIGFtZW5hemEuIEVzdGFzIHByw6FjdGljYXMgY29tcHJlbmRlbiBkZXNkZSBlbCBjb250cm9sIGRlIGFjY2Vzb3MgeSBsYSB2aWdpbGFuY2lhIHBvciBDQ1RWLCBoYXN0YSBlbCBzZWd1aW1pZW50byBkZSBhbGFybWFzIHkgbGEgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcy4gTGEgc3VwZXJ2aXNpw7NuIGVuIHRpZW1wbyByZWFsIHByb3BvcmNpb25hIHVuYSBjYXBhIGRlIHByb3RlY2Npw7NuIGFkaWNpb25hbCBhbCBwZXJtaXRpciB1bmEgcmVzcHVlc3RhIHLDoXBpZGEgeSBhZGVjdWFkYSBhbnRlIHNpdHVhY2lvbmVzIGRlIGVtZXJnZW5jaWEsIGxvIHF1ZSBlcyBlc2VuY2lhbCBwYXJhIG1pbmltaXphciBkYcOxb3MgeSBvcHRpbWl6YXIgbG9zIHJlY3Vyc29zIGRlIHNlZ3VyaWRhZCBkaXNwb25pYmxlcy4gICAgICAgCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmJnMS5wLTQuYnJhZC5tYi00CiAgICAgICAgICAuY29sLWxnLWF1dG8uajEKICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDgucG5nJyBhbHQ9JycpCiAgICAgICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgICAgICBwLm1iLTAgRW4gZWwgY29udGV4dG8gZGUgaW5mcmFlc3RydWN0dXJhcyBjcsOtdGljYXMsIGNvbW8gaW5zdGFsYWNpb25lcyBndWJlcm5hbWVudGFsZXMsIGNlbnRyb3MgZGUgc2FsdWQsIHkgc2lzdGVtYXMgZGUgdHJhbnNwb3J0ZSwgZWwgbW9uaXRvcmVvIGNvbnN0YW50ZSByZXN1bHRhIGluZGlzcGVuc2FibGUgcGFyYSBwcm90ZWdlciB0YW50byBsb3MgYWN0aXZvcyBjb21vIGEgbGFzIHBlcnNvbmFzIHF1ZSBpbnRlcmFjdMO6YW4gZW4gZGljaG9zIGVudG9ybm9zLiBMb3MgY2VudHJvcyBkZSBjb250cm9sIGNlbnRyYWxpemFuIGVzdGEgdGFyZWEsIGZhY2lsaXRhbmRvIGxhIGNvb3JkaW5hY2nDs24gZW50cmUgbG9zIGRpZmVyZW50ZXMgZGlzcG9zaXRpdm9zIHkgc2lzdGVtYXMgZGUgc2VndXJpZGFkLiBFc3RvcyBjZW50cm9zIGVzdMOhbiBlcXVpcGFkb3MgY29uIGhlcnJhbWllbnRhcyBhdmFuemFkYXMgZGUgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyB5IGFuYWzDrXRpY2EgZGUgdmlkZW8sIHF1ZSBheXVkYW4gYSBsb3Mgb3BlcmFkb3JlcyBhIGlkZW50aWZpY2FyIHBhdHJvbmVzIHNvc3BlY2hvc29zIHkgYSB0b21hciBkZWNpc2lvbmVzIGluZm9ybWFkYXMgZW4gbW9tZW50b3MgY3LDrXRpY29zLiBMYSBpbnRlZ3JhY2nDs24gZGUgZGl2ZXJzYXMgdGVjbm9sb2fDrWFzIHBlcm1pdGUgcXVlIGVsIHBlcnNvbmFsIGRlIHNlZ3VyaWRhZCBtYW50ZW5nYSB1bmEgdmlzacOzbiBjb21wbGV0YSB5IGVuIHRpZW1wbyByZWFsIGRlIGxhIHNpdHVhY2nDs24uCgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDkucG5nJyBhbHQ9JycpICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTAucG5nJyBhbHQ9JycpICAgICAgIAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgcCBVbm8gZGUgbG9zIGFzcGVjdG9zIG3DoXMgaW5ub3ZhZG9yZXMgZW4gZWwgbW9uaXRvcmVvIHkgZ2VzdGnDs24gZXMgZWwgdXNvIGRlIGxhIGFuYWzDrXRpY2EgZGUgdmlkZW8sIHF1ZSBhcGxpY2EgaW50ZWxpZ2VuY2lhIGFydGlmaWNpYWwgcGFyYSBtZWpvcmFyIGxhIHByZWNpc2nDs24geSBlZmljaWVuY2lhIGRlIGxhIHN1cGVydmlzacOzbi4gQ29uIGVzdGEgdGVjbm9sb2fDrWEsIGVzIHBvc2libGUgcmVhbGl6YXIgdGFyZWFzIGNvbW8gZWwgcmVjb25vY2ltaWVudG8gZmFjaWFsLCBsYSBkZXRlY2Npw7NuIGRlIGNvbXBvcnRhbWllbnRvcyBhbsOzbWFsb3MsIHkgZWwgYW7DoWxpc2lzIGRlIG11bHRpdHVkZXMsIGxvIHF1ZSBjb250cmlidXllIGEgdW5hIHJlc3B1ZXN0YSBtw6FzIHByb2FjdGl2YSBhbnRlIHBvc2libGVzIGFtZW5hemFzLiBFc3RhcyBjYXBhY2lkYWRlcyBhdmFuemFkYXMgcGVybWl0ZW4gcXVlIGxvcyBzaXN0ZW1hcyBkZXRlY3RlbiBwYXRyb25lcyBkZSByaWVzZ28gYW50ZXMgZGUgcXVlIHNlIGNvbnZpZXJ0YW4gZW4gcHJvYmxlbWFzIGdyYXZlcywgb3B0aW1pemFuZG8gYXPDrSBsb3MgcmVjdXJzb3MgZGUgc2VndXJpZGFkIHkgbWVqb3JhbmRvIGxhIHByb3RlY2Npw7NuIGVuIGx1Z2FyZXMgZGUgYWx0YSBjb25jdXJyZW5jaWEuICAgICAgCgogICAgICAgIC5iZzQucC00LmJyYWQgICAgICAgICAgCiAgICAgICAgICBwLm1iLTAgTGEgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyBlcyBvdHJhIHBpZXphIGZ1bmRhbWVudGFsIGRlbnRybyBkZSBlc3RvcyBzaXN0ZW1hcywgeWEgcXVlIGltcGxpY2EgY29vcmRpbmFyIGxhIHJlc3B1ZXN0YSBhIHNpdHVhY2lvbmVzIGVzcGVjw61maWNhcywgZGVzZGUgZW1lcmdlbmNpYXMgbcOpZGljYXMgaGFzdGEgcmllc2dvcyBhbWJpZW50YWxlcy4gTG9zIHByb3RvY29sb3MgZGUgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyBwZXJtaXRlbiBxdWUgZWwgcGVyc29uYWwgZGUgc2VndXJpZGFkIGFjdMO6ZSByw6FwaWRhbWVudGUsIHNpZ3VpZW5kbyB1bmEgc2VyaWUgZGUgcHJvY2VkaW1pZW50b3MgZXN0YW5kYXJpemFkb3MgcGFyYSBjYWRhIHRpcG8gZGUgYW1lbmF6YS4gRXN0byByZWR1Y2UgbGEgcG9zaWJpbGlkYWQgZGUgZXJyb3JlcyB5IGdhcmFudGl6YSBxdWUgbGEgcmVzcHVlc3RhIHNlYSBhZGVjdWFkYSBhIGxhIG1hZ25pdHVkIGRlbCBpbmNpZGVudGUuIExhIHRlY25vbG9nw61hIGFjdHVhbCBwZXJtaXRlIHJlZ2lzdHJhciBjYWRhIGluY2lkZW50ZSB5IGdlbmVyYXIgcmVwb3J0ZXMgYXV0b23DoXRpY29zLCBsbyBxdWUgcmVzdWx0YSDDunRpbCBwYXJhIGFuw6FsaXNpcyBwb3N0ZXJpb3JlcyB5IHBhcmEgbWVqb3JhciBsYXMgZXN0cmF0ZWdpYXMgZGUgcHJldmVuY2nDs24geSByZXNwdWVzdGEuCgogICAgcCBGaW5hbG1lbnRlLCBlbCBtb25pdG9yZW8geSBsYSBnZXN0acOzbiBzb24gZnVuZGFtZW50YWxlcyBlbiBsYSBwbGFuaWZpY2FjacOzbiBkZSBsYSBzZWd1cmlkYWQgYSBsYXJnbyBwbGF6bywgeWEgcXVlIGxvcyBkYXRvcyByZWNvcGlsYWRvcyBwcm9wb3JjaW9uYW4gaW5mb3JtYWNpw7NuIHZhbGlvc2Egc29icmUgbGFzIHRlbmRlbmNpYXMgZGUgcmllc2dvIGVuIHVuIHRlcnJpdG9yaW8gbyBpbnN0YWxhY2nDs24gZXNwZWPDrWZpY2EuIEVzdGUgYW7DoWxpc2lzIHBlcm1pdGUgYW50aWNpcGFyc2UgYSBwb3NpYmxlcyBwcm9ibGVtYXMgeSBhanVzdGFyIGxvcyByZWN1cnNvcyBkZSBzZWd1cmlkYWQgZGUgYWN1ZXJkbyBjb24gbGFzIG5lY2VzaWRhZGVzIGVtZXJnZW50ZXMuIEVuIGxhIGFjdHVhbGlkYWQsIG11Y2hhcyBpbnN0aXR1Y2lvbmVzIHDDumJsaWNhcyB5IHByaXZhZGFzIGVzdMOhbiBpbnZpcnRpZW5kbyBlbiBwbGF0YWZvcm1hcyBkZSBtb25pdG9yZW8gYXZhbnphZG8gcXVlIGludGVncmFuIGRpZmVyZW50ZXMgZnVlbnRlcyBkZSBkYXRvcywgcHJvbW92aWVuZG8gdW5hIGdlc3Rpw7NuIGRlIGxhIHNlZ3VyaWRhZCBtw6FzIHByZWNpc2EgeSBlZmVjdGl2YS4gICAKCiAgICBTZXBhcmFkb3IgCiAgICAjdF80XzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiA0LjEgQ2VudHJvcyBkZSBjb250cm9sCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUgICAKICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgIHAgTG9zIGNlbnRyb3MgZGUgY29udHJvbCBzb24gZXNwYWNpb3MgY2VudHJhbGl6YWRvcyBkZWRpY2Fkb3MgYSBsYSBzdXBlcnZpc2nDs24sIGNvb3JkaW5hY2nDs24geSBnZXN0acOzbiBkZSBsb3Mgc2lzdGVtYXMgZGUgc2VndXJpZGFkIGVuIHVuYSBpbnN0YWxhY2nDs24gbyB0ZXJyaXRvcmlvLiBFbiBlc3RvcyBjZW50cm9zLCBsb3Mgb3BlcmFkb3JlcyBwdWVkZW4gbW9uaXRvcmVhciBlbiB0aWVtcG8gcmVhbCBsYXMgYWN0aXZpZGFkZXMgY2FwdHVyYWRhcyBwb3IgY8OhbWFyYXMgZGUgdmlkZW92aWdpbGFuY2lhLCBzaXN0ZW1hcyBkZSBjb250cm9sIGRlIGFjY2VzbywgYWxhcm1hcywgeSBvdHJvcyBkaXNwb3NpdGl2b3MgZWxlY3Ryw7NuaWNvcyBkZSBzZWd1cmlkYWQuIEVzdG9zIGVzcGFjaW9zIHN1ZWxlbiBlc3RhciBlcXVpcGFkb3MgY29uIG3Dumx0aXBsZXMgcGFudGFsbGFzLCBjb25zb2xhcyBkZSBjb250cm9sIHkgc2lzdGVtYXMgZGUgY29tdW5pY2FjacOzbiwgcXVlIHBlcm1pdGVuIHVuYSB2aXNpw7NuIGludGVncmFsIGRlIGxhIHNlZ3VyaWRhZCBlbiB0b2RhIGxhIGluc3RhbGFjacOzbi4gR3JhY2lhcyBhIGxhIHRlY25vbG9nw61hIG1vZGVybmEsIGxvcyBjZW50cm9zIGRlIGNvbnRyb2wgdGFtYmnDqW4gcHVlZGVuIHJlY2liaXIgeSBwcm9jZXNhciBpbmZvcm1hY2nDs24gcHJvdmVuaWVudGUgZGUgc2Vuc29yZXMgeSByZWRlcyBleHRlcm5hcywgZmFjaWxpdGFuZG8gdW5hIHJlc3B1ZXN0YSByw6FwaWRhIHkgY29vcmRpbmFkYSBhbnRlIGN1YWxxdWllciBpbmNpZGVudGUuCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81MS5wbmcnIGFsdD0nJykgCgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICAuYmczLnAtNC5icmFkLmgtMTAwLmoxCiAgICAgICAgICBwLm1iLTAgTGEgb3JnYW5pemFjacOzbiBkZSBsb3MgY2VudHJvcyBkZSBjb250cm9sIHZhcsOtYSBzZWfDum4gZWwgdGFtYcOxbyB5IGxhcyBuZWNlc2lkYWRlcyBkZSBsYSBpbnN0YWxhY2nDs24gcXVlIHByb3RlZ2VuLiBFbiBncmFuZGVzIGluc3RhbGFjaW9uZXMgbyBpbmZyYWVzdHJ1Y3R1cmFzIGNyw610aWNhcywgY29tbyBhZXJvcHVlcnRvcywgaG9zcGl0YWxlcyBvIGNlbnRyYWxlcyBlbMOpY3RyaWNhcywgbG9zIGNlbnRyb3MgZGUgY29udHJvbCBwdWVkZW4gY29udGFyIGNvbiBtw7psdGlwbGVzIG9wZXJhZG9yZXMgZXNwZWNpYWxpemFkb3MgZW4gZGlzdGludGFzIMOhcmVhcyBkZSBzZWd1cmlkYWQuIEVzdGEgZXN0cnVjdHVyYSBwZXJtaXRlIHVuYSBkaXZpc2nDs24gZGVsIHRyYWJham8gbcOhcyBlZmljaWVudGUgeSBhc2VndXJhIHF1ZSBjYWRhIGFzcGVjdG8gZGUgbGEgc2VndXJpZGFkIGVzdMOpIGN1YmllcnRvIHBvciBwZXJzb25hbCBjYXBhY2l0YWRvIGVuIGxhIHRlY25vbG9nw61hIGVzcGVjw61maWNhIHF1ZSBzZSBtb25pdG9yZWEuIEFzaW1pc21vLCBsb3MgY2VudHJvcyBkZSBjb250cm9sIHN1ZWxlbiBpbnRlZ3JhcnNlIGNvbiBsb3Mgc2VydmljaW9zIGRlIGVtZXJnZW5jaWEgbG9jYWxlcywgY29tbyBib21iZXJvcyBvIHBvbGljw61hLCBmYWNpbGl0YW5kbyB1bmEgcmVzcHVlc3RhIGNvbmp1bnRhIGFudGUgc2l0dWFjaW9uZXMgY3LDrXRpY2FzLgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTIucG5nJyBhbHQ9JycpICAgICAgICAgCiAgICAgICAgICAgICAgIAogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgLmJnNC5wLTQuYnJhZC5oLTEwMC5qMQogICAgICAgICAgcC5tYi0wIExhIGltcG9ydGFuY2lhIGRlIGxvcyBjZW50cm9zIGRlIGNvbnRyb2wgcmFkaWNhIGVuIHN1IGNhcGFjaWRhZCBwYXJhIGNvb3JkaW5hciByZXNwdWVzdGFzIGEgaW5jaWRlbnRlcyBkZSBtYW5lcmEgw6FnaWwgeSBwcmVjaXNhLiBMb3Mgb3BlcmFkb3JlcyBwdWVkZW4gc2VndWlyIHByb3RvY29sb3MgZXN0YWJsZWNpZG9zIHBhcmEgY2FkYSB0aXBvIGRlIHNpdHVhY2nDs24sIGNvbW8gaW50cnVzaW9uZXMsIGluY2VuZGlvcyBvIGVtZXJnZW5jaWFzIG3DqWRpY2FzLCByZWR1Y2llbmRvIGVsIHRpZW1wbyBkZSByZWFjY2nDs24geSBtaW5pbWl6YW5kbyBsb3MgZGHDsW9zIHBvdGVuY2lhbGVzLiBJZ3VhbG1lbnRlLCBsb3MgY2VudHJvcyBkZSBjb250cm9sIHBlcm1pdGVuIGVsIHJlZ2lzdHJvIHkgYW7DoWxpc2lzIGRlIGxvcyBpbmNpZGVudGVzLCBnZW5lcmFuZG8gaW5mb3JtZXMgZGV0YWxsYWRvcyBxdWUgcHVlZGVuIHV0aWxpemFyc2UgcGFyYSBtZWpvcmFyIGxhIHBsYW5pZmljYWNpw7NuIGRlIHNlZ3VyaWRhZCB5IGFqdXN0YXIgbG9zIHByb3RvY29sb3Mgc2Vnw7puIGxhcyBuZWNlc2lkYWRlcyBlc3BlY8OtZmljYXMgZGVsIGVudG9ybm8uIEVzdG9zIHJlZ2lzdHJvcyB0YW1iacOpbiBzb24gw7p0aWxlcyBwYXJhIGVsIGFuw6FsaXNpcyBkZSBwYXRyb25lcyBkZSByaWVzZ28sIGxvIHF1ZSBjb250cmlidXllIGEgbGEgcHJldmVuY2nDs24gZGUgZnV0dXJvcyBpbmNpZGVudGVzLiAgICAgCgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmJnMS5wLTQuYnJhZC5tYi01CiAgICAgIC5jb2wtbGctYXV0by5qMQogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzUzLnBuZycgYWx0PScnKQogICAgICAuY29sLnB0LWxnLTAucHQtbWQtNAogICAgICAgIHAubWItMCBMb3MgYXZhbmNlcyBlbiB0ZWNub2xvZ8OtYSBoYW4gcGVybWl0aWRvIHF1ZSBsb3MgY2VudHJvcyBkZSBjb250cm9sIHNlIG1vZGVybmljZW4sIGludGVncmFuZG8gaGVycmFtaWVudGFzIGRlIGludGVsaWdlbmNpYSBhcnRpZmljaWFsIHkgYW5hbMOtdGljYSBkZSB2aWRlbyBxdWUgb3B0aW1pemFuIGxhIHZpZ2lsYW5jaWEgeSBlbCBhbsOhbGlzaXMgZGUgZGF0b3MgZW4gdGllbXBvIHJlYWwuIENvbiBlc3RhcyB0ZWNub2xvZ8OtYXMsIGVzIHBvc2libGUgZGV0ZWN0YXIgYXV0b23DoXRpY2FtZW50ZSBjb21wb3J0YW1pZW50b3Mgc29zcGVjaG9zb3MgbyBwYXRyb25lcyBkZSByaWVzZ28sIGxvIGN1YWwgZmFjaWxpdGEgbGEgaWRlbnRpZmljYWNpw7NuIHRlbXByYW5hIGRlIGFtZW5hemFzIHkgcmVkdWNlIGxhIGRlcGVuZGVuY2lhIGVuIGxhIHN1cGVydmlzacOzbiBtYW51YWwuIEVzdGEgYXV0b21hdGl6YWNpw7NuIG5vIHNvbG8gaW5jcmVtZW50YSBsYSBlZmljaWVuY2lhIGRlbCBjZW50cm8gZGUgY29udHJvbCwgc2lubyBxdWUgdGFtYmnDqW4gcGVybWl0ZSBhbCBwZXJzb25hbCBjb25jZW50cmFyc2UgZW4gZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzIHkgcmVzcHVlc3RhcyB0w6FjdGljYXMsIGFwb3nDoW5kb3NlIGVuIGRhdG9zIHByZWNpc29zIHkgYWxlcnRhcyBpbnRlbGlnZW50ZXMuICAKCiAgICBTZXBhcmFkb3IgCiAgICAjdF80XzIudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbwogICAgICBoMiA0LjIgQW5hbMOtdGljYSBkZSB2aWRlbwogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTQKICAgICAgLmNvbC1sZy04Lm15LWxnLTAubXktMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5iZzIucC00LmJyYWQubWItNQogICAgICAgICAgLmNvbC1sZy1hdXRvLmoxCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU0LnBuZycgYWx0PScnKQogICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgcC5tYi0wIExhIGFuYWzDrXRpY2EgZGUgdmlkZW8gZXMgdW5hIHRlY25vbG9nw61hIGF2YW56YWRhIHF1ZSBlbXBsZWEgYWxnb3JpdG1vcyBkZSBpbnRlbGlnZW5jaWEgYXJ0aWZpY2lhbCBwYXJhIHByb2Nlc2FyIHkgYW5hbGl6YXIgaW3DoWdlbmVzIGNhcHR1cmFkYXMgcG9yIGPDoW1hcmFzIGRlIHNlZ3VyaWRhZCBlbiB0aWVtcG8gcmVhbC4gRXN0YSBoZXJyYW1pZW50YSBwZXJtaXRlIGRldGVjdGFyIHkgZXZhbHVhciBhY3RpdmlkYWRlcyBzb3NwZWNob3NhcywgY29tbyBtb3ZpbWllbnRvcyBpbnVzdWFsZXMsIGNvbXBvcnRhbWllbnRvIGFncmVzaXZvIG8gbGEgcHJlc2VuY2lhIGRlIG9iamV0b3MgYWJhbmRvbmFkb3MgZW4gw6FyZWFzIHJlc3RyaW5naWRhcy4gTGEgYW5hbMOtdGljYSBkZSB2aWRlbyBmYWNpbGl0YSBsYSBnZXN0acOzbiBwcm9hY3RpdmEgZGUgbGEgc2VndXJpZGFkIGFsIGlkZW50aWZpY2FyIGF1dG9tw6F0aWNhbWVudGUgcGF0cm9uZXMgZGUgcmllc2dvLCBsbyBxdWUgcGVybWl0ZSBhIGxvcyBvcGVyYWRvcmVzIHRvbWFyIGRlY2lzaW9uZXMgcsOhcGlkYXMgeSBlZmVjdGl2YXMuIEFkZW3DoXMsIGVzdGEgdGVjbm9sb2fDrWEgcmVkdWNlIGxhIGNhcmdhIGRlIHRyYWJham8gZW4gZWwgbW9uaXRvcmVvIG1hbnVhbCwgcGVybWl0aWVuZG8gcXVlIGVsIHBlcnNvbmFsIGRlIHNlZ3VyaWRhZCBzZSBlbmZvcXVlIGVuIGluY2lkZW50ZXMgZGUgbWF5b3IgcmVsZXZhbmNpYS4KCiAgICAgICAgcCBFeGlzdGVuIG3Dumx0aXBsZXMgYXBsaWNhY2lvbmVzIGRlIGxhIGFuYWzDrXRpY2EgZGUgdmlkZW8gZW4gZGl2ZXJzb3Mgc2VjdG9yZXMsIGRlc2RlIGVsIGNvbnRyb2wgZGUgbXVsdGl0dWRlcyBlbiBldmVudG9zIHDDumJsaWNvcyBoYXN0YSBsYSBkZXRlY2Npw7NuIGRlIGludHJ1c29zIGVuIMOhcmVhcyByZXN0cmluZ2lkYXMuIEVuIGVudG9ybm9zIHVyYmFub3MsIHBvciBlamVtcGxvLCBzZSB1dGlsaXphIHBhcmEgbWVqb3JhciBsYSBzZWd1cmlkYWQgZW4gZWwgdHJhbnNwb3J0ZSBww7pibGljbyB5IGVuIGVzcGFjaW9zIGNvbmN1cnJpZG9zLCBhbCBpZGVudGlmaWNhciBjb21wb3J0YW1pZW50b3MgcXVlIHBvZHLDrWFuIHJlcHJlc2VudGFyIHVuIHJpZXNnbyBwYXJhIGxhIGNpdWRhZGFuw61hLiBBc2ltaXNtbywgZXMgZGUgZ3JhbiB1dGlsaWRhZCBlbiBpbmZyYWVzdHJ1Y3R1cmFzIGNyw610aWNhcywgY29tbyBhZXJvcHVlcnRvcyB5IGVzdGFjaW9uZXMgZGUgdHJlbiwgZG9uZGUgcGVybWl0ZSBsYSBkZXRlY2Npw7NuIGFudGljaXBhZGEgZGUgcG9zaWJsZXMgYW1lbmF6YXMsIG1pbmltaXphbmRvIGxvcyB0aWVtcG9zIGRlIHJlc3B1ZXN0YSBhbnRlIGluY2lkZW50ZXMuICAgCgogICAgICAuY29sLWxnLTQubXktbGctMC5teS0zCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTYucG5nJyBhbHQ9JycpIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQuYnJhZChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU1LnBuZycgYWx0PScnKSAgICAgCiAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMKICAgICAgICAuYmcxLnAtNS5icmFkLmoxLmgtMTAwCiAgICAgICAgICBwLm1iLTAgTGEgYW5hbMOtdGljYSBkZSB2aWRlbyB0YW1iacOpbiBwZXJtaXRlIGltcGxlbWVudGFyIHRlY25vbG9nw61hcyBkZSByZWNvbm9jaW1pZW50byBmYWNpYWwgeSBhbsOhbGlzaXMgZGUgb2JqZXRvcywgbG8gY3VhbCBlcyBwYXJ0aWN1bGFybWVudGUgw7p0aWwgZW4gc2lzdGVtYXMgZGUgY29udHJvbCBkZSBhY2Nlc28geSBlbiBsYSB2aWdpbGFuY2lhIGRlIMOhcmVhcyBkZSBhbHRvIHJpZXNnby4gRXN0b3Mgc2lzdGVtYXMgaWRlbnRpZmljYW4gaW5kaXZpZHVvcyBwcmV2aWFtZW50ZSByZWdpc3RyYWRvcyBlbiBiYXNlcyBkZSBkYXRvcyBkZSBzZWd1cmlkYWQsIGxvIHF1ZSBlcyBmdW5kYW1lbnRhbCBwYXJhIHByb3RlZ2VyIGluc3RhbGFjaW9uZXMgc2Vuc2libGVzIHkgZGV0ZWN0YXIgcG9zaWJsZXMgaW5mcmFjdG9yZXMgbyBwZXJzb25hcyBkZSBpbnRlcsOpcyBlbiBpbnZlc3RpZ2FjaW9uZXMuIFNpbiBlbWJhcmdvLCBzdSB1c28gZGViZSBjdW1wbGlyIGNvbiByZWd1bGFjaW9uZXMgZGUgcHJpdmFjaWRhZCB5IHByb3RlY2Npw7NuIGRlIGRhdG9zLCB5YSBxdWUgZWwgcmVjb25vY2ltaWVudG8gZmFjaWFsIHB1ZWRlIGludm9sdWNyYXIgbGEgcmVjb3BpbGFjacOzbiBkZSBpbmZvcm1hY2nDs24gc2Vuc2libGUuICAgICAgICAgCgogICAgcCBMb3MgYXZhbmNlcyBlbiBpbnRlbGlnZW5jaWEgYXJ0aWZpY2lhbCB5IGFwcmVuZGl6YWplIGF1dG9tw6F0aWNvIGhhbiBtZWpvcmFkbyBzaWduaWZpY2F0aXZhbWVudGUgbGEgcHJlY2lzacOzbiB5IGNhcGFjaWRhZCBwcmVkaWN0aXZhIGRlIGxvcyBzaXN0ZW1hcyBkZSBhbmFsw610aWNhIGRlIHZpZGVvLiBBY3R1YWxtZW50ZSwgZXN0b3Mgc2lzdGVtYXMgcHVlZGVuIGFwcmVuZGVyIGEgcGFydGlyIGRlIHBhdHJvbmVzIHkgY29tcG9ydGFtaWVudG9zIGhpc3TDs3JpY29zLCBpbmNyZW1lbnRhbmRvIHN1IGVmZWN0aXZpZGFkIGNvbiBlbCB0aWVtcG8uIEVzdG9zIGRlc2Fycm9sbG9zIG5vIHNvbG8gYXVtZW50YW4gbGEgc2VndXJpZGFkLCBzaW5vIHF1ZSB0YW1iacOpbiBwZXJtaXRlbiBsYSByZWNvcGlsYWNpw7NuIGRlIGRhdG9zIHZhbGlvc29zIHBhcmEgbWVqb3JhciBsYSBwbGFuaWZpY2FjacOzbiB5IHByZXZlbmNpw7NuIGVuIGxvcyBzaXN0ZW1hcyBkZSB2aWdpbGFuY2lhLiBFbiBlc3RlIHNlbnRpZG8sIGxhIGFuYWzDrXRpY2EgZGUgdmlkZW8gcmVwcmVzZW50YSB1bmEgaGVycmFtaWVudGEgaW5kaXNwZW5zYWJsZSBwYXJhIGN1YWxxdWllciBzaXN0ZW1hIGRlIHNlZ3VyaWRhZCBtb2Rlcm5vIHF1ZSBidXNxdWUgdW5hIGdlc3Rpw7NuIG3DoXMgZWZpY2llbnRlIHkgcHJldmVudGl2YSBkZSBsb3Mgcmllc2dvcy4gICAgICAgICAgICAKCgogICAgU2VwYXJhZG9yIAogICAgI3RfNF8zLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8KICAgICAgaDIgNC4zIEdlc3Rpw7NuIGRlIGluY2lkZW50ZXMKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1lbmQubWItNSAKICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTcucG5nJyBhbHQ9JycpICAgICAgCiAgICAgIC5jb2wucHQtbGctMC5wdC1tZC00CiAgICAgICAgLmJnMi5wLTQuajEKICAgICAgICAgIHAubWItMCBMYSBnZXN0acOzbiBkZSBpbmNpZGVudGVzIGVzIHVuIHByb2Nlc28gZXN0cnVjdHVyYWRvIHF1ZSBwZXJtaXRlIHJlc3BvbmRlciBkZSBtYW5lcmEgZWZpY2F6IGEgc2l0dWFjaW9uZXMgY3LDrXRpY2FzLCBjb21vIGVtZXJnZW5jaWFzIGRlIHNlZ3VyaWRhZCwgZmFsbG9zIGVuIGxvcyBzaXN0ZW1hcywgbyBkZXNhc3RyZXMgbmF0dXJhbGVzLiBFc3RlIHByb2Nlc28gaW5jbHV5ZSBsYSBpZGVudGlmaWNhY2nDs24sIGNsYXNpZmljYWNpw7NuLCB5IHJlc29sdWNpw7NuIGRlIGluY2lkZW50ZXMsIGFzw60gY29tbyBsYSBpbXBsZW1lbnRhY2nDs24gZGUgYWNjaW9uZXMgY29ycmVjdGl2YXMgcGFyYSBldml0YXIgbGEgcmVjdXJyZW5jaWEgZGUgcHJvYmxlbWFzIHNpbWlsYXJlcy4KCiAgICAudGl0dWxvLXNleHRvLmNvbG9yLWFjZW50by1ib3RvbmVzCiAgICAgIGg1IEZpZ3VyYSAyLgogICAgICBzcGFuIEdlc3Rpw7NuIGRlIGluY2lkZW50ZXMKICAgIAogICAgLmJnZmlnLnAtNS5icmFkLm1iLTIKICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNTguc3ZnJyBhbHQ9J0xhIGZpZ3VyYTIgc2UgZGVub21pbmEgwqtHZXN0acOzbiBkZSBpbmNpZGVudGVzwrsgeSBwcmVzZW50YSBsb3MgNSBjb21wb25lbnRlcyBwcmluY2lwYWxlcyBpbnZvbHVjcmFuZG8gdGFudG8gc2lzdGVtYXMgYXV0b23DoXRpY29zIGNvbW8gbGEgaW50ZXJ2ZW5jacOzbiBodW1hbmEuJykgCiAgICBmaWdjYXB0aW9uLm1iLTUgRnVlbnRlOiBPSVQsIDIwMjQuIAoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi00CiAgICAgIC5jb2wtbGctOC5teS1sZy0wLm15LTMuajEKICAgICAgICBwICBMYSBnZXN0acOzbiBkZSBpbmNpZGVudGVzIGVzIGZ1bmRhbWVudGFsIGVuIGVsIMOhbWJpdG8gZGUgbGEgc2VndXJpZGFkLCB5YSBxdWUgcGVybWl0ZSBtaW5pbWl6YXIgbG9zIGRhw7FvcywgY29vcmRpbmFyIHJlY3Vyc29zLCB5IG9wdGltaXphciBsYSByZXNwdWVzdGEgZGUgbG9zIGVxdWlwb3MgZW5jYXJnYWRvcyBkZSBwcm90ZWdlciBhIGxhcyBwZXJzb25hcyB5IGJpZW5lcyBlbiB1bmEgb3JnYW5pemFjacOzbiBvIHRlcnJpdG9yaW8uIExhcyBldGFwYXMgZGUgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyBzb24gZGlzZcOxYWRhcyBzZWfDum4gcHJvdG9jb2xvcyBlc3RhbmRhcml6YWRvcyBxdWUgZXN0YWJsZWNlbiBwcm9jZWRpbWllbnRvcyBjbGFyb3MgeSBwcmVjaXNvcyBwYXJhIGNhZGEgdGlwbyBkZSBhbWVuYXphLiAgICAgIAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5iZzIucC00LmJyYWQubWItNAogICAgICAgICAgLmNvbC1sZy1hdXRvLmoxCiAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU5LnBuZycgYWx0PScnKQogICAgICAgICAgLmNvbC5wdC1sZy0wLnB0LW1kLTQKICAgICAgICAgICAgcC5tYi0wIEVuIGVsIGNvbnRleHRvIGRlIGxhIHNlZ3VyaWRhZCBlbGVjdHLDs25pY2EsIGxhIGdlc3Rpw7NuIGRlIGluY2lkZW50ZXMgaW52b2x1Y3JhIHRhbnRvIHNpc3RlbWFzIGF1dG9tw6F0aWNvcyBjb21vIGxhIGludGVydmVuY2nDs24gaHVtYW5hLiBMb3Mgc2lzdGVtYXMgZGUgbW9uaXRvcmVvIHkgYW5hbMOtdGljYSBkZSB2aWRlbyBwdWVkZW4gZGV0ZWN0YXIgaW5jaWRlbnRlcyB5IGFjdGl2YXIgYWxlcnRhcyBlbiB0aWVtcG8gcmVhbCwgZmFjaWxpdGFuZG8gdW5hIHJlc3B1ZXN0YSByw6FwaWRhLiBMb3MgY2VudHJvcyBkZSBjb250cm9sIGFjdMO6YW4gY29tbyBlbCBuw7pjbGVvIGRlIGNvb3JkaW5hY2nDs24sIGRvbmRlIGxvcyBvcGVyYWRvcmVzIHJlY2liZW4gbGEgaW5mb3JtYWNpw7NuIGRlbCBpbmNpZGVudGUgeSBkZXNwbGllZ2FuIGxvcyByZWN1cnNvcyBuZWNlc2FyaW9zLiBFc3RhIGNhcGFjaWRhZCBkZSByZXNwdWVzdGEgcsOhcGlkYSBlcyBjcnVjaWFsIHBhcmEgbWl0aWdhciBkYcOxb3MgeSBwcm90ZWdlciBhIGxvcyB1c3VhcmlvcyBkZSB1biBlc3BhY2lvIGRldGVybWluYWRvLiBBZGljaW9uYWxtZW50ZSwgbGEgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyBpbmNsdXllIGxhIGRvY3VtZW50YWNpw7NuIGRlIGNhZGEgc3VjZXNvLCBsbyBxdWUgcGVybWl0ZSByZWFsaXphciBhbsOhbGlzaXMgcG9zdGVyaW9yZXMgcGFyYSBpZGVudGlmaWNhciBwYXRyb25lcyBkZSByaWVzZ28geSBtZWpvcmFyIGxvcyBwcm90b2NvbG9zIGRlIHNlZ3VyaWRhZC4KCiAgICAgIC5jb2wtbGctNC5teS1sZy0wLm15LTMKICAgICAgICBpbWcuaW1nLWEuaW1nLXQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy82MC5wbmcnIGFsdD0nJykgIAoKICAgIHAgTGEgdGVjbm9sb2fDrWEgaGEgYXZhbnphZG8gZW4gbGEgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyBtZWRpYW50ZSBsYSBpbnRlZ3JhY2nDs24gZGUgc2lzdGVtYXMgZGUgaW50ZWxpZ2VuY2lhIGFydGlmaWNpYWwgeSBtYWNoaW5lIGxlYXJuaW5nLCBsb3MgY3VhbGVzIHBlcm1pdGVuIHByZXZlciBjaWVydG9zIHRpcG9zIGRlIGluY2lkZW50ZXMgYSB0cmF2w6lzIGRlIGxhIGlkZW50aWZpY2FjacOzbiBkZSBwYXRyb25lcyBlbiBkYXRvcyBoaXN0w7NyaWNvcy4gRXN0b3Mgc2lzdGVtYXMgcHJlZGljdGl2b3MgZmFjaWxpdGFuIGxhIHByZXBhcmFjacOzbiBhbnRlIHBvc2libGVzIGFtZW5hemFzLCB5IGFsIGF1dG9tYXRpemFyIGFsZ3VuYXMgZGUgbGFzIHRhcmVhcyBkZSBnZXN0acOzbiwgbG9zIGVxdWlwb3MgZGUgc2VndXJpZGFkIHB1ZWRlbiBlbmZvY2Fyc2UgZW4gc2l0dWFjaW9uZXMgY3LDrXRpY2FzIHF1ZSByZXF1aWVyZW4gaW50ZXJ2ZW5jacOzbiBodW1hbmEuIExhcyBhcGxpY2FjaW9uZXMgZGUgaW50ZWxpZ2VuY2lhIGFydGlmaWNpYWwgdGFtYmnDqW4gcGVybWl0ZW4gZmlsdHJhciBmYWxzYXMgYWxhcm1hcyB5IHByaW9yaXphciBhcXVlbGxvcyBldmVudG9zIHF1ZSByZWFsbWVudGUgc3Vwb25lbiB1biByaWVzZ28sIGF1bWVudGFuZG8gbGEgZWZlY3RpdmlkYWQgZGUgbGEgcmVzcHVlc3RhIGFudGUgaW5jaWRlbnRlcy4gICAgICAKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgLmNvbC1sZy00Lm15LWxnLTAubXktMwogICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzYxLnBuZycgYWx0PScnKSAgICAgIAogICAgICAuY29sLWxnLTgubXktbGctMC5teS0zLmoxCiAgICAgICAgLmJnMy5wLTQuYnJhZAogICAgICAgICAgcC5tYi0wIFBvciBvdHJvIGxhZG8sIGxhIGdlc3Rpw7NuIGRlIGluY2lkZW50ZXMgZXN0w6EgcmVndWxhZGEgcG9yIG5vcm1hcyBpbnRlcm5hY2lvbmFsZXMgcXVlIGRlZmluZW4gbGFzIG1lam9yZXMgcHLDoWN0aWNhcyBwYXJhIHN1IGltcGxlbWVudGFjacOzbiwgY29tbyBsYSBJU08gMjIzMjAsIHF1ZSBwcm9wb3JjaW9uYSBkaXJlY3RyaWNlcyBwYXJhIGxhIGdlc3Rpw7NuIGRlIGVtZXJnZW5jaWFzIHkgc2VndXJpZGFkIHDDumJsaWNhLiBFc3RhcyBub3JtYXRpdmFzIGFzZWd1cmFuIHF1ZSBsb3MgcHJvY2VkaW1pZW50b3MgZGUgZ2VzdGnDs24gZGUgaW5jaWRlbnRlcyBzZWFuIGNvbnNpc3RlbnRlcyB5IGVmaWNpZW50ZXMsIGVzdGFibGVjaWVuZG8gdW4gbWFyY28gY29tw7puIHF1ZSBmYWNpbGl0YSBsYSBjb2xhYm9yYWNpw7NuIGVudHJlIGRpc3RpbnRvcyBlcXVpcG9zIGRlIHJlc3B1ZXN0YSwgdGFudG8gYSBuaXZlbCBpbnRlcm5vIGRlIHVuYSBvcmdhbml6YWNpw7NuIGNvbW8gZW4gY29vcGVyYWNpw7NuIGNvbiBzZXJ2aWNpb3MgZGUgZW1lcmdlbmNpYSBleHRlcm5vcy4gICAgICAgICAK"},null]}